import gradio as gr
from controllers.book_controller import BookController


# C·∫≠p nh·∫≠t m√¥ t·∫£ khi ch·ªçn tr∆∞·ªùng
def update_field_desc(field):
    descs = {
        "title": "**Ti√™u ƒë·ªÅ s√°ch:** T√¨m ki·∫øm theo t√™n s√°ch.",
        "authors": "**T√°c gi·∫£:** T√¨m ki·∫øm theo t√™n t√°c gi·∫£.",
        "categories": "**Th·ªÉ lo·∫°i:** T√¨m ki·∫øm theo th·ªÉ lo·∫°i s√°ch.",
        "isbn13": "**ISBN13:** T√¨m ki·∫øm theo m√£ ISBN13.",
        "isbn10": "**ISBN10:** T√¨m ki·∫øm theo m√£ ISBN10.",
        "published_year": "**NƒÉm xu·∫•t b·∫£n:** T√¨m ki·∫øm theo nƒÉm xu·∫•t b·∫£n.",
        "average_rating": "**ƒê√°nh gi√° trung b√¨nh:** T√¨m ki·∫øm theo ƒëi·ªÉm ƒë√°nh gi√°.",
        "num_pages": "**S·ªë trang:** T√¨m ki·∫øm theo s·ªë trang.",
        "ratings_count": "**S·ªë l∆∞·ª£t ƒë√°nh gi√°:** T√¨m ki·∫øm theo s·ªë l∆∞·ª£t ƒë√°nh gi√°.",
        "title_and_subtitle": "**Ti√™u ƒë·ªÅ & ph·ª• ƒë·ªÅ:** T√¨m ki·∫øm theo ti√™u ƒë·ªÅ v√† ph·ª• ƒë·ªÅ.",
        "tagged_description": "**M√¥ t·∫£ ƒë√£ g·∫Øn th·∫ª:** T√¨m ki·∫øm theo m√¥ t·∫£ ƒë√£ g·∫Øn th·∫ª.",
    }
    return descs.get(field, "")

def create_dashboard(controller):
    with gr.Blocks(theme=gr.themes.Glass(), fill_height=True) as dashboard:
        gr.Markdown("# üìö System Book Recommendation")

        with gr.Tab("üîç Recommend Books"):
            with gr.Row():
                user_query = gr.Textbox(label="üîé Enter a description of a book", placeholder="e.g., A story about forgiveness")
                submit_button = gr.Button("Find Recommendations", variant="primary")
            gr.Markdown("## Recommendations")
            with gr.Row():
                output = gr.Gallery(label="Recommended Books", columns=8, rows=2)
            with gr.Row():
                table = gr.Dataframe(
                    headers=["Index", "Title", "Authors", "Category", "Description", "Thumbnail"],
                    wrap=True,
                    interactive=True
                )
            submit_button.click(
                fn=controller.recommend_books,
                inputs=[user_query],
                outputs=[output, table]
            )

        with gr.Tab("üõ†Ô∏è Book Management & Statistics"):
            with gr.Row():
                gr.Markdown("### üìö Manage Your Books")
            with gr.Row():
                with gr.Column(scale=2):
                    with gr.Row():
                        add_isbn13 = gr.Textbox(label="ISBN13")
                        add_isbn10 = gr.Textbox(label="ISBN10")
                        add_authors = gr.Textbox(label="Authors")
                    with gr.Row():
                        add_title = gr.Textbox(label="Title")
                    with gr.Row():
                        add_categories = gr.Textbox(label="Categories")
                        add_thumbnail = gr.Textbox(label="Thumbnail URL")
                    with gr.Row():
                        add_description = gr.Textbox(label="Description")
                    with gr.Row():
                        add_published_year = gr.Textbox(label="Published Year")
                        add_average_rating = gr.Textbox(label="Average Rating")
                        add_num_pages = gr.Textbox(label="Num Pages")
                    with gr.Row():
                        add_ratings_count = gr.Textbox(label="Ratings Count")
                        add_title_and_subtitle = gr.Textbox(label="Title and Subtitle")
                        add_tagged_description = gr.Textbox(label="Tagged Description")
                    add_btn = gr.Button("Add Book", variant="primary")
                with gr.Column(scale=5):
                    gr.Markdown("## üìä Books Table")
                    with gr.Row():
                        books_table = gr.Dataframe(
                            value=controller.show_books_table(columns=["Index", "title", "authors", "description", "thumbnail"]),
                            headers=["Index", "Title", "Authors", "Description", "Thumbnail"],
                            wrap=True,
                            interactive=True,
                            label="Books Table"
                        )
                    with gr.Row():
                        with gr.Column(scale=3):
                            del_idx = gr.Number(label="Row index to delete (start from 0)", value=0, precision=0)
                            del_btn = gr.Button("Delete Book", variant="stop")
                            with gr.Row():
                                reset_btn = gr.Button("Reset Statistics", variant="secondary")
                        with gr.Column(scale=2):
                            stats_box = gr.Markdown(value=controller.get_stats(), label="üìà Statistics")

            with gr.Row():
                gr.Markdown("---") 
            with gr.Row():
                gr.Markdown("---") 
            with gr.Row():
                gr.Markdown("# üìö Manage Search Your Books")
            with gr.Row():
                with gr.Column(scale=1):
                    with gr.Row():
                        gr.Markdown("#### üîé T√¨m ki·∫øm s√°ch theo tr∆∞·ªùng th√¥ng tin")
                    
                    # --- Th√™m v√πng t√¨m ki·∫øm ---
                #     with gr.Row():
                #         search_field = gr.Dropdown(
                #             choices=[
                #                 ("title", "Ti√™u ƒë·ªÅ s√°ch"),
                #                 ("authors", "T√°c gi·∫£"),
                #                 ("categories", "Th·ªÉ lo·∫°i"),
                #                 ("isbn13", "ISBN13"),
                #                 ("isbn10", "ISBN10"),
                #                 ("published_year", "NƒÉm xu·∫•t b·∫£n"),
                #                 ("average_rating", "ƒê√°nh gi√° trung b√¨nh"),
                #                 ("num_pages", "S·ªë trang"),
                #                 ("ratings_count", "S·ªë l∆∞·ª£t ƒë√°nh gi√°"),
                #                 ("title_and_subtitle", "Ti√™u ƒë·ªÅ & ph·ª• ƒë·ªÅ"),
                #                 ("tagged_description", "M√¥ t·∫£ ƒë√£ g·∫Øn th·∫ª"),
                #             ],
                #             label="Ch·ªçn tr∆∞·ªùng th√¥ng tin",
                #             value="title"
                #         )

                #         field_desc = gr.Markdown("**Ti√™u ƒë·ªÅ s√°ch:** T√¨m ki·∫øm theo t√™n s√°ch.")
                #         search_value = gr.Textbox(label="Nh·∫≠p gi√° tr·ªã c·∫ßn t√¨m")
                #         search_btn = gr.Button("T√¨m ki·∫øm", variant="secondary")
                # with gr.Column(scale=4):
                #     with gr.Row():
                #         gr.Markdown("## üìä Search Books Table")
                #     with gr.Row():
                #         books_table = gr.Dataframe(
                #             value=controller.show_books_table(columns=["Index", "title", "authors", "description", "thumbnail"]),
                #             headers=["Index", "Title", "Authors", "Description", "Thumbnail"],
                #             # wrap=True,
                #             interactive=True,
                #             label="Books Table"
                #         )
            with gr.Row():
                with gr.Column(scale=1):
                    search_fields = ["title", "authors", "categories", "published_year", "average_rating"]
                    field_dropdown = gr.Dropdown(choices=search_fields, label="Ch·ªçn tr∆∞·ªùng t√¨m ki·∫øm")
                    search_input = gr.Textbox(label="Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
                with gr.Column(scale=4):
                    search_results = gr.Dataframe(
                        headers=["Index", "ISBN13", "ISBN10", "Title", "Authors", "Categories", "Year", "Rating"],
                        interactive=False,
                        wrap=True,
                        label="K·∫øt qu·∫£ t√¨m ki·∫øm"
                    )
            # controller = BookController("books_cleaned.csv")
            # G·∫Øn s·ª± ki·ªán .input() ƒë·ªÉ khi nh·∫≠p t·ª´ng k√Ω t·ª± th√¨ g·ªçi h√†m t√¨m ki·∫øm
            search_input.input(fn=controller.search_books, inputs=[field_dropdown, search_input], outputs=search_results)

            # search_field.change(
            #     fn=update_field_desc,
            #     inputs=[search_field],
            #     outputs=[field_desc]
            # )
            
            add_btn.click(
                fn=controller.add_book,
                inputs=[books_table, add_isbn13, add_isbn10, add_title, add_authors, add_categories,
                        add_thumbnail, add_description, add_published_year, add_average_rating,
                        add_num_pages, add_ratings_count, add_title_and_subtitle, add_tagged_description],
                outputs=[books_table, stats_box]
            )
            del_btn.click(
                fn=controller.delete_book,
                inputs=[books_table, del_idx],
                outputs=[books_table, stats_box]
            )
            reset_btn.click(
                fn=controller.reset_stats,
                inputs=[],
                outputs=[stats_box]
            )
            # # S·ª± ki·ªán t√¨m ki·∫øm
            # search_value.input(
            #     fn=lambda field, value: controller.search_books_by_field(field, value),
            #     inputs=[search_field, search_value],
            #     outputs=[books_table]
            # )
            # search_btn.click(
            #     fn=lambda field, value: controller.search_books_by_field(field, value),
            #     inputs=[search_field, search_value],
            #     outputs=[books_table]
            # )
    return dashboard